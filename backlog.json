[
  {
    "task_id": "20250630-145356-adicionar",
    "objective": "Adicionar um t\u00edtulo 'Beta' ao lado de 'Cappy' no cabe\u00e7alho do index.html",
    "status": "SUCCESS",
    "created_at": "2025-06-30T14:53:56.366644",
    "completed_at": "2025-06-30T14:53:56.369681",
    "attempts": [
      {
        "attempt_id": 1,
        "timestamp": "2025-06-30T14:53:56.369111",
        "plan": "Localizar a tag <h1> com 'Cappy' e adicionar ' <span>Beta</span>' ao lado.",
        "generated_code_diff": "Simula\u00e7\u00e3o de diff para a tentativa 1",
        "execution_result": {
          "outcome": "SUCCESS",
          "logs": ""
        }
      }
    ],
    "final_solution": {
      "file": "index.html",
      "code": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Cappy</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; display: flex; flex-direction: column; height: 100vh; margin: 0; background-color: #f4f4f9; }\n        #header { padding: 10px 20px; background-color: #ffffff; border-bottom: 1px solid #ddd; display: flex; justify-content: space-between; align-items: center; gap: 15px; }\n        #header h1 { margin: 0; font-size: 1.2em; }\n        .header-controls { display: flex; align-items: center; gap: 10px; }\n        #model-selector { padding: 5px; border-radius: 5px; }\n        #new-chat-button { background-color: #007aff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; }\n        #chat-container { flex-grow: 1; overflow-y: auto; padding: 20px; display: flex; flex-direction: column; gap: 15px; }\n        .message { padding: 10px 15px; border-radius: 12px; max-width: 80%; line-height: 1.5; word-wrap: break-word; }\n        .user-message { background-color: #007aff; color: white; align-self: flex-end; }\n        .ai-message { background-color: #e5e5ea; color: #000; align-self: flex-start; }\n        .error-message { background-color: #ffdddd; color: #d8000c; align-self: center; max-width: 90%; }\n        .ai-message pre { background-color: #2d2d2d; color: #f8f8f2; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        #input-area { display: flex; padding: 10px; border-top: 1px solid #ddd; background-color: #ffffff; }\n        #input-text { flex-grow: 1; padding: 10px; border: 1px solid #ccc; border-radius: 5px; resize: none; font-size: 1em; font-family: inherit; }\n        #send-button { margin-left: 10px; background-color: #34c759; color: white; border: none; padding: 0 20px; border-radius: 5px; cursor: pointer; }\n        #send-button:disabled { background-color: #a9a9a9; }\n    </style>\n</head>\n<body>\n    <div id=\"header\">\n        <h1>Cappy <span>Beta</span></h1>\n        <!-- 1. ADICIONA OS CONTROLES NO CABE\u00c7ALHO -->\n        <div class=\"header-controls\">\n            <label for=\"model-selector\">Modelo:</label>\n            <select id=\"model-selector\">\n                <option value=\"llama3\">Llama 3</option>\n                <option value=\"codellama\">Code Llama</option>\n                <option value=\"gemma\">Gemma</option>\n                <!-- Adicione outros modelos que voc\u00ea tenha no Ollama -->\n            </select>\n            <button id=\"new-chat-button\">Novo Chat</button>\n        </div>\n    </div>\n    <div id=\"chat-container\"></div>\n    <div id=\"input-area\">\n        <textarea id=\"input-text\" placeholder=\"Digite sua mensagem... (Shift+Enter para enviar)\" rows=\"1\"></textarea>\n        <button id=\"send-button\">Enviar</button>\n    </div>\n    <script>\n        const sendButton = document.getElementById('send-button');\n        const newChatButton = document.getElementById('new-chat-button');\n        const inputText = document.getElementById('input-text');\n        const chatContainer = document.getElementById('chat-container');\n        const modelSelector = document.getElementById('model-selector'); // Pega o seletor\n\n        let conversationHistory = [];\n        let isStreaming = false;\n\n        function addMessageToUI(sender, text, isError = false) {\n            const messageElement = document.createElement('div');\n            messageElement.classList.add('message');\n            if (isError) {\n                messageElement.classList.add('error-message');\n                messageElement.innerHTML = text;\n            } else {\n                messageElement.classList.add(sender === 'user' ? 'user-message' : 'ai-message');\n                messageElement.innerHTML = sender === 'ai' ? marked.parse(text) : text;\n            }\n            chatContainer.appendChild(messageElement);\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n            return messageElement;\n        }\n\n        async function handleSend() {\n            // CORRE\u00c7\u00c3O BUG 1: Garante que texto vazio n\u00e3o seja enviado.\n            if (isStreaming) return;\n            const userText = inputText.value.trim();\n            if (!userText) return;\n\n            isStreaming = true;\n            sendButton.disabled = true;\n            inputText.value = \"\";\n            inputText.style.height = 'auto';\n\n            conversationHistory.push({ role: 'user', content: userText });\n            addMessageToUI('user', userText);\n            \n            let aiMessageElement = addMessageToUI('ai', '...');\n            let fullResponse = \"\";\n            let errorOccurred = false;\n\n            try {\n                // 2. USA O VALOR DO SELETOR\n                const selectedModel = modelSelector.value;\n                await window.api.streamText(\n                    conversationHistory,\n                    selectedModel,\n                    (data) => {\n                        if (data.error) {\n                            errorOccurred = true;\n                            addMessageToUI(null, `<strong>Erro do Modelo:</strong> ${data.error}`, true);\n                            return;\n                        }\n                        if (data.message?.content) {\n                            if (aiMessageElement.innerHTML.includes('...')) aiMessageElement.innerHTML = '';\n                            fullResponse += data.message.content;\n                            aiMessageElement.innerHTML = marked.parse(fullResponse);\n                        }\n                    },\n                    (error) => {\n                        errorOccurred = true;\n                        addMessageToUI(null, `<strong>Erro de Comunica\u00e7\u00e3o:</strong> ${error}`, true);\n                    },\n                    () => {\n                        if (!errorOccurred) {\n                            conversationHistory.push({ role: 'assistant', content: fullResponse });\n                            window.api.setStore('conversationHistory', conversationHistory);\n                        }\n                    }\n                );\n            } catch (e) {\n                addMessageToUI(null, `<strong>Erro Cr\u00edtico:</strong> ${e.message}`, true);\n            } finally {\n                isStreaming = false;\n                sendButton.disabled = false;\n                inputText.focus();\n            }\n        }\n        \n        async function loadSettings() {\n            // 3. CARREGA AS CONFIGURA\u00c7\u00d5ES SALVAS (hist\u00f3rico e modelo)\n            const savedHistory = await window.api.getStore('conversationHistory');\n            if (savedHistory && Array.isArray(savedHistory)) {\n                conversationHistory = savedHistory;\n                chatContainer.innerHTML = '';\n                conversationHistory.forEach(message => {\n                    addMessageToUI(message.role === 'assistant' ? 'ai' : 'user', message.content);\n                });\n            }\n            const savedModel = await window.api.getStore('selectedModel');\n            if (savedModel) {\n                modelSelector.value = savedModel;\n            }\n        }\n\n        // --- EVENT LISTENERS ---\n        newChatButton.addEventListener('click', () => {\n            conversationHistory = [];\n            chatContainer.innerHTML = '';\n            window.api.setStore('conversationHistory', []);\n            isStreaming = false;\n            sendButton.disabled = false;\n            inputText.focus();\n        });\n\n        modelSelector.addEventListener('change', () => {\n            // 4. SALVA A ESCOLHA DO MODELO QUANDO ELA MUDA\n            window.api.setStore('selectedModel', modelSelector.value);\n        });\n\n        sendButton.addEventListener('click', handleSend);\n        inputText.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter' && event.shiftKey) {\n                event.preventDefault();\n                handleSend();\n            }\n        });\n        document.addEventListener('DOMContentLoaded', loadSettings);\n\n    </script>\n</body>\n</html>"
    }
  },
  {
    "task_id": "20250630-151937-mude",
    "objective": "Mude o texto do bot\u00e3o de 'Novo Chat' para 'Limpar Conversa' e a cor de fundo para um tom de vermelho.",
    "status": "FAILED",
    "created_at": "2025-06-30T15:19:37.393914",
    "completed_at": null,
    "attempts": [
      {
        "attempt_id": 1,
        "timestamp": "2025-06-30T15:19:38.375722",
        "plan": "Erro na API: Error code: 404 - {'error': {'message': 'The model `gpt-4-turbo` does not exist or you do not have access to it.', 'type': 'invalid_request_error', 'param': None, 'code': 'model_not_found'}}",
        "execution_result": {
          "outcome": "ERROR",
          "logs": "Erro na API: Error code: 404 - {'error': {'message': 'The model `gpt-4-turbo` does not exist or you do not have access to it.', 'type': 'invalid_request_error', 'param': None, 'code': 'model_not_found'}}"
        }
      }
    ],
    "final_solution": null
  },
  {
    "task_id": "20250630-152111-mude",
    "objective": "Mude o texto do bot\u00e3o de 'Novo Chat' para 'Limpar Conversa' e a cor de fundo para um tom de vermelho.",
    "status": "FAILED",
    "created_at": "2025-06-30T15:21:11.833158",
    "completed_at": null,
    "attempts": [
      {
        "attempt_id": 1,
        "timestamp": "2025-06-30T15:21:15.398774",
        "plan": "Erro na API: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}",
        "execution_result": {
          "outcome": "ERROR",
          "logs": "Erro na API: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}"
        }
      }
    ],
    "final_solution": null
  },
  {
    "task_id": "20250630-161427-mude",
    "objective": "Mude o texto do bot\u00e3o de 'Novo Chat' para 'Limpar Conversa' e a cor de fundo para um tom de vermelho.",
    "status": "SUCCESS",
    "created_at": "2025-06-30T16:14:27.284182",
    "completed_at": "2025-06-30T16:14:52.523011",
    "attempts": [
      {
        "attempt_id": 1,
        "timestamp": "2025-06-30T16:14:52.522339",
        "plan": "Alterar o texto e cor de fundo do bot\u00e3o 'Novo Chat' para 'Limpar Conversa' e um tom de vermelho.",
        "execution_result": {
          "outcome": "SUCCESS",
          "logs": ""
        }
      }
    ],
    "final_solution": {
      "file": "index.html",
      "code": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Cappy</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; display: flex; flex-direction: column; height: 100vh; margin: 0; background-color: #f4f4f9; }\n        #header { padding: 10px 20px; background-color: #ffffff; border-bottom: 1px solid #ddd; display: flex; justify-content: space-between; align-items: center; gap: 15px; }\n        #header h1 { margin: 0; font-size: 1.2em; }\n        .header-controls { display: flex; align-items: center; gap: 10px; }\n        #model-selector { padding: 5px; border-radius: 5px; }\n        #new-chat-button { background-color: #ff4d4d; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; }\n        #chat-container { flex-grow: 1; overflow-y: auto; padding: 20px; display: flex; flex-direction: column; gap: 15px; }\n        .message { padding: 10px 15px; border-radius: 12px; max-width: 80%; line-height: 1.5; word-wrap: break-word; }\n        .user-message { background-color: #007aff; color: white; align-self: flex-end; }\n        .ai-message { background-color: #e5e5ea; color: #000; align-self: flex-start; }\n        .error-message { background-color: #ffdddd; color: #d8000c; align-self: center; max-width: 90%; }\n        .ai-message pre { background-color: #2d2d2d; color: #f8f8f2; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        #input-area { display: flex; padding: 10px; border-top: 1px solid #ddd; background-color: #ffffff; }\n        #input-text { flex-grow: 1; padding: 10px; border: 1px solid #ccc; border-radius: 5px; resize: none; font-size: 1em; font-family: inherit; }\n        #send-button { margin-left: 10px; background-color: #34c759; color: white; border: none; padding: 0 20px; border-radius: 5px; cursor: pointer; }\n        #send-button:disabled { background-color: #a9a9a9; }\n    </style>\n</head>\n<body>\n    <div id=\"header\">\n        <h1>Cappy <span>Beta</span></h1>\n        <!-- 1. ADICIONA OS CONTROLES NO CABE\u00c7ALHO -->\n        <div class=\"header-controls\">\n            <label for=\"model-selector\">Modelo:</label>\n            <select id=\"model-selector\">\n                <option value=\"llama3\">Llama 3</option>\n                <option value=\"codellama\">Code Llama</option>\n                <option value=\"gemma\">Gemma</option>\n                <!-- Adicione outros modelos que voc\u00ea tenha no Ollama -->\n            </select>\n            <button id=\"new-chat-button\">Limpar Conversa</button>\n        </div>\n    </div>\n    <div id=\"chat-container\"></div>\n    <div id=\"input-area\">\n        <textarea id=\"input-text\" placeholder=\"Digite sua mensagem... (Shift+Enter para enviar)\" rows=\"1\"></textarea>\n        <button id=\"send-button\">Enviar</button>\n    </div>\n    <script>\n        const sendButton = document.getElementById('send-button');\n        const newChatButton = document.getElementById('new-chat-button');\n        const inputText = document.getElementById('input-text');\n        const chatContainer = document.getElementById('chat-container');\n        const modelSelector = document.getElementById('model-selector'); // Pega o seletor\n\n        let conversationHistory = [];\n        let isStreaming = false;\n\n        function addMessageToUI(sender, text, isError = false) {\n            const messageElement = document.createElement('div');\n            messageElement.classList.add('message');\n            if (isError) {\n                messageElement.classList.add('error-message');\n                messageElement.innerHTML = text;\n            } else {\n                messageElement.classList.add(sender === 'user' ? 'user-message' : 'ai-message');\n                messageElement.innerHTML = sender === 'ai' ? marked.parse(text) : text;\n            }\n            chatContainer.appendChild(messageElement);\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n            return messageElement;\n        }\n\n        async function handleSend() {\n            // CORRE\u00c7\u00c3O BUG 1: Garante que texto vazio n\u00e3o seja enviado.\n            if (isStreaming) return;\n            const userText = inputText.value.trim();\n            if (!userText) return;\n\n            isStreaming = true;\n            sendButton.disabled = true;\n            inputText.value = \"\";\n            inputText.style.height = 'auto';\n\n            conversationHistory.push({ role: 'user', content: userText });\n            addMessageToUI('user', userText);\n            \n            let aiMessageElement = addMessageToUI('ai', '...');\n            let fullResponse = \"\";\n            let errorOccurred = false;\n\n            try {\n                // 2. USA O VALOR DO SELETOR\n                const selectedModel = modelSelector.value;\n                await window.api.streamText(\n                    conversationHistory,\n                    selectedModel,\n                    (data) => {\n                        if (data.error) {\n                            errorOccurred = true;\n                            addMessageToUI(null, `<strong>Erro do Modelo:</strong> ${data.error}`, true);\n                            return;\n                        }\n                        if (data.message?.content) {\n                            if (aiMessageElement.innerHTML.includes('...')) aiMessageElement.innerHTML = '';\n                            fullResponse += data.message.content;\n                            aiMessageElement.innerHTML = marked.parse(fullResponse);\n                        }\n                    },\n                    (error) => {\n                        errorOccurred = true;\n                        addMessageToUI(null, `<strong>Erro de Comunica\u00e7\u00e3o:</strong> ${error}`, true);\n                    },\n                    () => {\n                        if (!errorOccurred) {\n                            conversationHistory.push({ role: 'assistant', content: fullResponse });\n                            window.api.setStore('conversationHistory', conversationHistory);\n                        }\n                    }\n                );\n            } catch (e) {\n                addMessageToUI(null, `<strong>Erro Cr\u00edtico:</strong> ${e.message}`, true);\n            } finally {\n                isStreaming = false;\n                sendButton.disabled = false;\n                inputText.focus();\n            }\n        }\n        \n        async function loadSettings() {\n            // 3. CARREGA AS CONFIGURA\u00c7\u00d5ES SALVAS (hist\u00f3rico e modelo)\n            const savedHistory = await window.api.getStore('conversationHistory');\n            if (savedHistory && Array.isArray(savedHistory)) {\n                conversationHistory = savedHistory;\n                chatContainer.innerHTML = '';\n                conversationHistory.forEach(message => {\n                    addMessageToUI(message.role === 'assistant' ? 'ai' : 'user', message.content);\n                });\n            }\n            const savedModel = await window.api.getStore('selectedModel');\n            if (savedModel) {\n                modelSelector.value = savedModel;\n            }\n        }\n\n        // --- EVENT LISTENERS ---\n        newChatButton.addEventListener('click', () => {\n            conversationHistory = [];\n            chatContainer.innerHTML = '';\n            window.api.setStore('conversationHistory', []);\n            isStreaming = false;\n            sendButton.disabled = false;\n            inputText.focus();\n        });\n\n        modelSelector.addEventListener('change', () => {\n            // 4. SALVA A ESCOLHA DO MODELO QUANDO ELA MUDA\n            window.api.setStore('selectedModel', modelSelector.value);\n        });\n\n        sendButton.addEventListener('click', handleSend);\n        inputText.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter' && event.shiftKey) {\n                event.preventDefault();\n                handleSend();\n            }\n        });\n        document.addEventListener('DOMContentLoaded', loadSettings);\n\n    </script>\n</body>\n</html>"
    }
  }
]